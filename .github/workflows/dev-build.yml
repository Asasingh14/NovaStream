name: CI - Dev Branch Builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'

jobs:
  run-tests-and-coverage:
    name: Run Tests and Coverage
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run Ruff (linter)
        run: ruff check src tests

      - name: Run Bandit (security scan)
        run: bandit -r src
        
      - name: Run tests
        run: pytest --cov --cov-branch --cov-report=xml --junitxml=junit.xml -o junit_family=legacy

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  snyk-security-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    needs: run-tests-and-coverage
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    needs: run-tests-and-coverage
    steps:
      - uses: actions/checkout@v4
      - name: Check Python dependencies licenses
        uses: apache/skywalking-eyes@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  binary-security-scan:
    name: Binary Security Scan
    needs: [build-macos-binary, build-windows-binary, build-linux-binary]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'artifacts/'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  codeql-analysis:
    if: ${{ !github.event.repository.private }}
    name: Static Code Analysis (CodeQL)
    runs-on: ubuntu-latest
    needs: run-tests-and-coverage
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: github/codeql-action/init@v2
        with:
          languages: python

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: github/codeql-action/analyze@v2

  dependency-vulnerability-scan-safety:
    name: Dependency Vulnerability Scan (Safety)
    runs-on: ubuntu-latest
    needs: run-tests-and-coverage
    steps:
      - uses: actions/checkout@v4
      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

  build-macos-binary:
    name: Build macOS Binary
    timeout-minutes: 30
    needs: run-tests-and-coverage
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install UPX
        run: brew install upx || true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pyinstaller
      - name: Build macOS binary
        run: |
          pyinstaller --clean --strip --windowed --onefile --name novastream \
            --exclude-module seleniumwire \
            --exclude-module selenium \
            --exclude-module webdriver_manager \
            --add-data "src/assets/icon.png:src" \
            src/gui.py
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: novastream-macos
          path: dist/novastream

  build-windows-binary:
    name: Build Windows Binary
    timeout-minutes: 30
    needs: run-tests-and-coverage
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install UPX
        run: choco install upx -y || exit 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pyinstaller
      - name: Build Windows binary
        shell: cmd
        run: |
          pyinstaller --clean --strip --windowed --onefile --name novastream.exe ^
            --exclude-module seleniumwire ^
            --exclude-module selenium ^
            --exclude-module webdriver_manager ^
            --add-data "src\\assets\\icon.png;src" ^
            src\\gui.py
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: novastream-windows
          path: dist/novastream.exe

  build-linux-binary:
    name: Build Linux Binary
    timeout-minutes: 30
    needs: run-tests-and-coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libgl1-mesa-dev libglib2.0-dev upx-ucl
          pip install pyinstaller
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Build Linux binary
        run: |
          pyinstaller --clean --strip --windowed --onefile --name novastream \
            --exclude-module seleniumwire \
            --exclude-module selenium \
            --exclude-module webdriver_manager \
            --add-data "src/assets/icon.png:src" \
            src/gui.py
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: novastream-linux
          path: dist/novastream